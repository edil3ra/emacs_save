;; Object docs/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "docs/"
  :tables (list 
   (semanticdb-table "Game.js.html"
    :major-mode 'html-mode
    :tags 
        '( ("Phaser Source: D:/wamp/www/phaser/src/core/Game.js" section nil nil [67 154])
            ("* @copyright    2014 Photon Storm Ltd.
* @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}
*/

/**
* This is where the magic happens. The Game object is the heart of your game,
* providing quick access to common functions and handling the boot process.
* 
* \"Hell, there are no rules here - we're trying to accomplish something.\"
*                                                       Thomas A. Edison
*
* @class Phaser.Game
* @constructor
* @param {number|string} [width=800] - The width of your game in game pixels. If given as a string the value must be between 0 and 100 and will be used as the percentage width of the parent container, or the browser window if no parent is given.
* @param {number|string} [height=600] - The height of your game in game pixels. If given as a string the value must be between 0 and 100 and will be used as the percentage height of the parent container, or the browser window if no parent is given.
* @param {number} [renderer=Phaser.AUTO] - Which renderer to use: Phaser.AUTO will auto-detect, Phaser.WEBGL, Phaser.CANVAS or Phaser.HEADLESS (no rendering at all).
* @param {string|HTMLElement} [parent=''] - The DOM element into which this games canvas will be injected. Either a DOM ID (string) or the element itself.
* @param {object} [state=null] - The default state object. A object consisting of Phaser.State functions (preload, create, update, render) or null.
* @param {boolean} [transparent=false] - Use a transparent canvas background or not.
* @param {boolean} [antialias=true] - Draw all image textures anti-aliased or not. The default is for smooth textures, but disable if your game features pixel art.
* @param {object} [physicsConfig=null] - A physics configuration object to pass to the Physics world on creation.
*/
Phaser.Game = function (width, height, renderer, parent, state, transparent, antialias, physicsConfig) {

    /**
    * @property {number} id - Phaser Game ID (for when Pixi supports multiple instances).
    * @readonly
    */
    this.id = Phaser.GAMES.push(this) - 1;

    /**
    * @property {object} config - The Phaser.Game configuration object.
    */
    this.config = null;

    /**
    * @property {object} physicsConfig - The Phaser.Physics.World configuration object.
    */
    this.physicsConfig = physicsConfig;

    /**
    * @property {string|HTMLElement} parent - The Games DOM parent.
    * @default
    */
    this.parent = '';

    /**
    * The current Game Width in pixels.
    *
    * _Do not modify this property directly:_ use {@link Phaser.ScaleManager#setGameSize} - eg. `game.scale.setGameSize(width, height)` - instead.
    *
    * @property {integer} width
    * @readonly
    * @default
    */
    this.width = 800;

    /**
    * The current Game Height in pixels.
    *
    * _Do not modify this property directly:_ use {@link Phaser.ScaleManager#setGameSize} - eg. `game.scale.setGameSize(width, height)` - instead.
    *
    * @property {integer} height
    * @readonly
    * @default
    */
    this.height = 600;

    /**
    * @property {integer} _width - Private internal var.
    * @private
    */
    this._width = 800;

    /**
    * @property {integer} _height - Private internal var.
    * @private
    */
    this._height = 600;

    /**
    * @property {boolean} transparent - Use a transparent canvas background or not.
    * @default
    */
    this.transparent = false;

    /**
    * @property {boolean} antialias - Anti-alias graphics. By default scaled images are smoothed in Canvas and WebGL, set anti-alias to false to disable this globally.
    * @default
    */
    this.antialias = true;

    /**
    * @property {boolean} preserveDrawingBuffer - The value of the preserveDrawingBuffer flag affects whether or not the contents of the stencil buffer is retained after rendering.
    * @default
    */
    this.preserveDrawingBuffer = false;

    /**
    * @property {PIXI.CanvasRenderer|PIXI.WebGLRenderer} renderer - The Pixi Renderer.
    * @protected
    */
    this.renderer = null;

    /**
    * @property {number} renderType - The Renderer this game will use. Either Phaser.AUTO, Phaser.CANVAS or Phaser.WEBGL.
    * @readonly
    */
    this.renderType = Phaser.AUTO;

    /**
    * @property {Phaser.StateManager} state - The StateManager.
    */
    this.state = null;

    /**
    * @property {boolean} isBooted - Whether the game engine is booted, aka available.
    * @readonly
    */
    this.isBooted = false;

    /**
    * @property {boolean} isRunning - Is game running or paused?
    * @readonly
    */
    this.isRunning = false;

    /**
    * @property {Phaser.RequestAnimationFrame} raf - Automatically handles the core game loop via requestAnimationFrame or setTimeout
    * @protected
    */
    this.raf = null;

    /**
    * @property {Phaser.GameObjectFactory} add - Reference to the Phaser.GameObjectFactory.
    */
    this.add = null;

    /**
    * @property {Phaser.GameObjectCreator} make - Reference to the GameObject Creator.
    */
    this.make = null;

    /**
    * @property {Phaser.Cache} cache - Reference to the assets cache.
    */
    this.cache = null;

    /**
    * @property {Phaser.Input} input - Reference to the input manager
    */
    this.input = null;

    /**
    * @property {Phaser.Loader} load - Reference to the assets loader.
    */
    this.load = null;

    /**
    * @property {Phaser.Math} math - Reference to the math helper.
    */
    this.math = null;

    /**
    * @property {Phaser.Net} net - Reference to the network class.
    */
    this.net = null;

    /**
    * @property {Phaser.ScaleManager} scale - The game scale manager.
    */
    this.scale = null;

    /**
    * @property {Phaser.SoundManager} sound - Reference to the sound manager.
    */
    this.sound = null;

    /**
    * @property {Phaser.Stage} stage - Reference to the stage.
    */
    this.stage = null;

    /**
    * @property {Phaser.Time} time - Reference to the core game clock.
    */
    this.time = null;

    /**
    * @property {Phaser.TweenManager} tweens - Reference to the tween manager.
    */
    this.tweens = null;

    /**
    * @property {Phaser.World} world - Reference to the world.
    */
    this.world = null;

    /**
    * @property {Phaser.Physics} physics - Reference to the physics manager.
    */
    this.physics = null;

    /**
    * @property {Phaser.RandomDataGenerator} rnd - Instance of repeatable random data generator helper.
    */
    this.rnd = null;

    /**
    * @property {Phaser.Device} device - Contains device information and capabilities.
    */
    this.device = Phaser.Device;

    /**
    * @property {Phaser.Camera} camera - A handy reference to world.camera.
    */
    this.camera = null;

    /**
    * @property {HTMLCanvasElement} canvas - A handy reference to renderer.view, the canvas that the game is being rendered in to.
    */
    this.canvas = null;

    /**
    * @property {CanvasRenderingContext2D} context - A handy reference to renderer.context (only set for CANVAS games, not WebGL)
    */
    this.context = null;

    /**
    * @property {Phaser.Utils.Debug} debug - A set of useful debug utilitie.
    */
    this.debug = null;

    /**
    * @property {Phaser.Particles} particles - The Particle Manager.
    */
    this.particles = null;

    /**
    * If `false` Phaser will automatically render the display list every update. If `true` the render loop will be skipped.
    * You can toggle this value at run-time to gain exact control over when Phaser renders. This can be useful in certain types of game or application.
    * Please note that if you don't render the display list then none of the game object transforms will be updated, so use this value carefully.
    * @property {boolean} lockRender
    * @default
    */
    this.lockRender = false;

    /**
    * @property {boolean} stepping - Enable core loop stepping with Game.enableStep().
    * @default
    * @readonly
    */
    this.stepping = false;

    /**
    * @property {boolean} pendingStep - An internal property used by enableStep, but also useful to query from your own game objects.
    * @default
    * @readonly
    */
    this.pendingStep = false;

    /**
    * @property {number} stepCount - When stepping is enabled this contains the current step cycle.
    * @default
    * @readonly
    */
    this.stepCount = 0;

    /**
    * @property {Phaser.Signal} onPause - This event is fired when the game pauses.
    */
    this.onPause = null;

    /**
    * @property {Phaser.Signal} onResume - This event is fired when the game resumes from a paused state.
    */
    this.onResume = null;

    /**
    * @property {Phaser.Signal} onBlur - This event is fired when the game no longer has focus (typically on page hide).
    */
    this.onBlur = null;

    /**
    * @property {Phaser.Signal} onFocus - This event is fired when the game has focus (typically on page show).
    */
    this.onFocus = null;

    /**
    * @property {boolean} _paused - Is game paused?
    * @private
    */
    this._paused = false;

    /**
    * @property {boolean} _codePaused - Was the game paused via code or a visibility change?
    * @private
    */
    this._codePaused = false;

    /**
    * The ID of the current/last logic update applied this render frame, starting from 0.
    *
    * The first update is `currentUpdateID === 0` and the last update is `currentUpdateID === updatesThisFrame.`
    * @property {integer} currentUpdateID
    * @protected
    */
    this.currentUpdateID = 0;

    /**
    * Number of logic updates expected to occur this render frame;
    * will be 1 unless there are catch-ups required (and allowed).
    * @property {integer} updatesThisFrame
    * @protected
    */
    this.updatesThisFrame = 1;

    /**
    * @property {number} _deltaTime - accumulate elapsed time until a logic update is due
    * @private
    */
    this._deltaTime = 0;

    /**
    * @property {number} _lastCount - remember how many 'catch-up' iterations were used on the logicUpdate last frame
    * @private
    */
    this._lastCount = 0;

    /**
    * @property {number} _spiralling - if the 'catch-up' iterations are spiralling out of control, this counter is incremented
    * @private
    */
    this._spiralling = 0;

    /**
    * If the game is struggling to maintain the desired FPS, this signal will be dispatched.
    * The desired/chosen FPS should probably be closer to the {@link Phaser.Time#suggestedFps} value.
    * @property {Phaser.Signal} fpsProblemNotifier
    * @public
    */
    this.fpsProblemNotifier = new Phaser.Signal();

    /**
    * @property {boolean} forceSingleUpdate - Should the game loop force a logic update, regardless of the delta timer? Set to true if you know you need this. You can toggle it on the fly.
    */
    this.forceSingleUpdate = false;

    /**
    * @property {number} _nextNotification - the soonest game.time.time value that the next fpsProblemNotifier can be dispatched
    * @private
    */
    this._nextFpsNotification = 0;

    //  Parse the configuration object (if any)
    if (arguments.length === 1 && typeof arguments[0] === 'object')
    {
        this.parseConfig(arguments[0]);
    }
    else
    {
        this.config = { enableDebug: true };

        if (typeof width !== 'undefined')
        {
            this._width = width;
        }

        if (typeof height !== 'undefined')
        {
            this._height = height;
        }

        if (typeof renderer !== 'undefined')
        {
            this.renderType = renderer;
        }

        if (typeof parent !== 'undefined')
        {
            this.parent = parent;
        }

        if (typeof transparent !== 'undefined')
        {
            this.transparent = transparent;
        }

        if (typeof antialias !== 'undefined')
        {
            this.antialias = antialias;
        }

        this.rnd = new Phaser.RandomDataGenerator([(Date.now() * Math.random()).toString()]);

        this.state = new Phaser.StateManager(this, state);
    }

    this.device.whenReady(this.boot, this);

    return this;

};

Phaser.Game.prototype = {

    /**
    * Parses a Game configuration object.
    *
    * @method Phaser.Game#parseConfig
    * @protected
    */
    parseConfig: function (config) {

        this.config = config;

        if (typeof config['enableDebug'] === 'undefined')
        {
            this.config.enableDebug = true;
        }

        if (config['width'])
        {
            this._width = config['width'];
        }

        if (config['height'])
        {
            this._height = config['height'];
        }

        if (config['renderer'])
        {
            this.renderType = config['renderer'];
        }

        if (config['parent'])
        {
            this.parent = config['parent'];
        }

        if (config['transparent'])
        {
            this.transparent = config['transparent'];
        }

        if (config['antialias'])
        {
            this.antialias = config['antialias'];
        }

        if (config['preserveDrawingBuffer'])
        {
            this.preserveDrawingBuffer = config['preserveDrawingBuffer'];
        }

        if (config['physicsConfig'])
        {
            this.physicsConfig = config['physicsConfig'];
        }

        var seed = [(Date.now() * Math.random()).toString()];

        if (config['seed'])
        {
            seed = config['seed'];
        }

        this.rnd = new Phaser.RandomDataGenerator(seed);

        var state = null;

        if (config['state'])
        {
            state = config['state'];
        }

        this.state = new Phaser.StateManager(this, state);

    },

    /**
    * Initialize engine sub modules and start the game.
    *
    * @method Phaser.Game#boot
    * @protected
    */
    boot: function () {

        if (this.isBooted)
        {
            return;
        }

        this.onPause = new Phaser.Signal();
        this.onResume = new Phaser.Signal();
        this.onBlur = new Phaser.Signal();
        this.onFocus = new Phaser.Signal();

        this.isBooted = true;

        this.math = Phaser.Math;

        this.scale = new Phaser.ScaleManager(this, this._width, this._height);
        this.stage = new Phaser.Stage(this);

        this.setUpRenderer();

        this.world = new Phaser.World(this);
        this.add = new Phaser.GameObjectFactory(this);
        this.make = new Phaser.GameObjectCreator(this);
        this.cache = new Phaser.Cache(this);
        this.load = new Phaser.Loader(this);
        this.time = new Phaser.Time(this);
        this.tweens = new Phaser.TweenManager(this);
        this.input = new Phaser.Input(this);
        this.sound = new Phaser.SoundManager(this);
        this.physics = new Phaser.Physics(this, this.physicsConfig);
        this.particles = new Phaser.Particles(this);
        this.plugins = new Phaser.PluginManager(this);
        this.net = new Phaser.Net(this);

        this.time.boot();
        this.stage.boot();
        this.world.boot();
        this.scale.boot();
        this.input.boot();
        this.sound.boot();
        this.state.boot();

        if (this.config['enableDebug'])
        {
            this.debug = new Phaser.Utils.Debug(this);
            this.debug.boot();
        }
        else
        {
            this.debug = { preUpdate: function () {}, update: function () {}, reset: function () {} };
        }

        this.showDebugHeader();

        this.isRunning = true;

        if (this.config && this.config['forceSetTimeOut'])
        {
            this.raf = new Phaser.RequestAnimationFrame(this, this.config['forceSetTimeOut']);
        }
        else
        {
            this.raf = new Phaser.RequestAnimationFrame(this, false);
        }

        this.raf.start();

    },

    /**
    * Displays a Phaser version debug header in the console.
    *
    * @method Phaser.Game#showDebugHeader
    * @protected
    */
    showDebugHeader: function () {

        var v = Phaser.VERSION;
        var r = 'Canvas';
        var a = 'HTML Audio';
        var c = 1;

        if (this.renderType === Phaser.WEBGL)
        {
            r = 'WebGL';
            c++;
        }
        else if (this.renderType == Phaser.HEADLESS)
        {
            r = 'Headless';
        }

        if (this.device.webAudio)
        {
            a = 'WebAudio';
            c++;
        }

        if (this.device.chrome)
        {
            var args = [
                '%c %c %c Phaser v' + v + ' | Pixi.js ' + PIXI.VERSION + ' | ' + r + ' | ' + a + '  %c %c ' + '%c http://phaser.io %c\\u2665%c\\u2665%c\\u2665',
                'background: #3db79f',
                'background: #329582',
                'color: #ffffff; background: #226558;',
                'background: #329582',
                'background: #3db79f',
                'background: #ffffff'
            ];

            for (var i = 0; i &lt; 3; i++)
            {
                if (i &lt; c)
                {
                    args.push('color: #ff2424; background: #fff');
                }
                else
                {
                    args.push('color: #959595; background: #fff');
                }
            }

            console.log.apply(console, args);
        }
        else if (window['console'])
        {
            console.log('Phaser v' + v + ' | Pixi.js ' + PIXI.VERSION + ' | ' + r + ' | ' + a + ' | http://phaser.io');
        }

    },

    /**
    * Checks if the device is capable of using the requested renderer and sets it up or an alternative if not.
    *
    * @method Phaser.Game#setUpRenderer
    * @protected
    */
    setUpRenderer: function () {

        if (this.config['canvasID'])
        {
            this.canvas = Phaser.Canvas.create(this.width, this.height, this.config['canvasID']);
        }
        else
        {
            this.canvas = Phaser.Canvas.create(this.width, this.height);
        }

        if (this.config['canvasStyle'])
        {
            this.canvas.style = this.config['canvasStyle'];
        }
        else
        {
            this.canvas.style['-webkit-full-screen'] = 'width: 100%; height: 100%';
        }

        if (this.device.cocoonJS)
        {
            if (this.renderType === Phaser.CANVAS)
            {
                this.canvas.screencanvas = true;
            }
            else
            {
                // Some issue related to scaling arise with Cocoon using screencanvas and webgl renderer.
                this.canvas.screencanvas = false;
            }
        }

        if (this.renderType === Phaser.HEADLESS || this.renderType === Phaser.CANVAS || (this.renderType === Phaser.AUTO && this.device.webGL === false))
        {
            if (this.device.canvas)
            {
                if (this.renderType === Phaser.AUTO)
                {
                    this.renderType = Phaser.CANVAS;
                }

                this.renderer = new PIXI.CanvasRenderer(this.width, this.height, { \"view\": this.canvas, \"transparent\": this.transparent, \"resolution\": 1, \"clearBeforeRender\": true });
                this.context = this.renderer.context;
            }
            else
            {
                throw new Error('Phaser.Game - cannot create Canvas or WebGL context, aborting.');
            }
        }
        else
        {
            //  They requested WebGL and their browser supports it
            this.renderType = Phaser.WEBGL;

            this.renderer = new PIXI.WebGLRenderer(this.width, this.height, { \"view\": this.canvas, \"transparent\": this.transparent, \"resolution\": 1, \"antialias\": this.antialias, \"preserveDrawingBuffer\": this.preserveDrawingBuffer });
            this.context = null;
        }

        if (this.renderType !== Phaser.HEADLESS)
        {
            this.stage.smoothed = this.antialias;
            
            Phaser.Canvas.addToDOM(this.canvas, this.parent, false);
            Phaser.Canvas.setTouchAction(this.canvas);
        }

    },

    /**
    * The core game loop.
    *
    * @method Phaser.Game#update
    * @protected
    * @param {number} time - The current time as provided by RequestAnimationFrame.
    */
    update: function (time) {

        this.time.update(time);

        // if the logic time is spiraling upwards, skip a frame entirely
        if (this._spiralling > 1 && !this.forceSingleUpdate)
        {
            // cause an event to warn the program that this CPU can't keep up with the current desiredFps rate
            if (this.time.time > this._nextFpsNotification)
            {
                // only permit one fps notification per 10 seconds
                this._nextFpsNotification = this.time.time + 1000 * 10;

                // dispatch the notification signal
                this.fpsProblemNotifier.dispatch();
            }

            // reset the _deltaTime accumulator which will cause all pending dropped frames to be permanently skipped
            this._deltaTime = 0;
            this._spiralling = 0;

            // call the game render update exactly once every frame
            this.updateRender(this.time.slowMotion * this.time.desiredFps);
        }
        else
        {
            // step size taking into account the slow motion speed
            var slowStep = this.time.slowMotion * 1000.0 / this.time.desiredFps;

            // accumulate time until the slowStep threshold is met or exceeded... up to a limit of 3 catch-up frames at slowStep intervals
            this._deltaTime += Math.max(Math.min(slowStep * 3, this.time.elapsed), 0);

            // call the game update logic multiple times if necessary to \"catch up\" with dropped frames
            // unless forceSingleUpdate is true
            var count = 0;

            this.updatesThisFrame = Math.floor(this._deltaTime / slowStep);

            if (this.forceSingleUpdate)
            {
                this.updatesThisFrame = Math.min(1, this.updatesThisFrame);
            }

            while (this._deltaTime >= slowStep)
            {
                this._deltaTime -= slowStep;
                this.currentUpdateID = count;

                this.updateLogic(1.0 / this.time.desiredFps);
                //  Sync the scene graph after _every_ logic update to account for moved game objects                
                this.stage.updateTransform();

                count++;

                if (this.forceSingleUpdate && count === 1)
                {
                    break;
                }
            }

            // detect spiraling (if the catch-up loop isn't fast enough, the number of iterations will increase constantly)
            if (count > this._lastCount)
            {
                this._spiralling++;
            }
            else if (count &lt; this._lastCount)
            {
                // looks like it caught up successfully, reset the spiral alert counter
                this._spiralling = 0;
            }

            this._lastCount = count;

            // call the game render update exactly once every frame unless we're playing catch-up from a spiral condition
            this.updateRender(this._deltaTime / slowStep);
        }

    },

    /**
    * Updates all logic subsystems in Phaser. Called automatically by Game.update.
    *
    * @method Phaser.Game#updateLogic
    * @protected
    * @param {number} timeStep - The current timeStep value as determined by Game.update.
    */
    updateLogic: function (timeStep) {

        if (!this._paused && !this.pendingStep)
        {
            if (this.stepping)
            {
                this.pendingStep = true;
            }

            this.scale.preUpdate();
            this.debug.preUpdate();
            this.world.camera.preUpdate();
            this.physics.preUpdate();
            this.state.preUpdate(timeStep);
            this.plugins.preUpdate(timeStep);
            this.stage.preUpdate();

            this.state.update();
            this.stage.update();
            this.tweens.update(timeStep);
            this.sound.update();
            this.input.update();
            this.physics.update();
            this.particles.update();
            this.plugins.update();

            this.stage.postUpdate();
            this.plugins.postUpdate();
        }
        else
        {
            // Scaling and device orientation changes are still reflected when paused.
            this.scale.pauseUpdate();
            this.state.pauseUpdate();
            this.debug.preUpdate();
        }

    },

    /**
    * Runs the Render cycle.
    * It starts by calling State.preRender. In here you can do any last minute adjustments of display objects as required.
    * It then calls the renderer, which renders the entire display list, starting from the Stage object and working down.
    * It then calls plugin.render on any loaded plugins, in the order in which they were enabled.
    * After this State.render is called. Any rendering that happens here will take place on-top of the display list.
    * Finally plugin.postRender is called on any loaded plugins, in the order in which they were enabled.
    * This method is called automatically by Game.update, you don't need to call it directly.
    * Should you wish to have fine-grained control over when Phaser renders then use the `Game.lockRender` boolean.
    * Phaser will only render when this boolean is `false`.
    *
    * @method Phaser.Game#updateRender
    * @protected
    * @param {number} elapsedTime - The time elapsed since the last update.
    */
    updateRender: function (elapsedTime) {

        if (this.lockRender)
        {
            return;
        }

        this.state.preRender(elapsedTime);
        this.renderer.render(this.stage);

        this.plugins.render(elapsedTime);
        this.state.render(elapsedTime);
        this.plugins.postRender(elapsedTime);

    },

    /**
    * Enable core game loop stepping. When enabled you must call game.step() directly (perhaps via a DOM button?)
    * Calling step will advance the game loop by one frame. This is extremely useful for hard to track down errors!
    *
    * @method Phaser.Game#enableStep
    */
    enableStep: function () {

        this.stepping = true;
        this.pendingStep = false;
        this.stepCount = 0;

    },

    /**
    * Disables core game loop stepping.
    *
    * @method Phaser.Game#disableStep
    */
    disableStep: function () {

        this.stepping = false;
        this.pendingStep = false;

    },

    /**
    * When stepping is enabled you must call this function directly (perhaps via a DOM button?) to advance the game loop by one frame.
    * This is extremely useful to hard to track down errors! Use the internal stepCount property to monitor progress.
    *
    * @method Phaser.Game#step
    */
    step: function () {

        this.pendingStep = false;
        this.stepCount++;

    },

    /**
    * Nukes the entire game from orbit.
    *
    * @method Phaser.Game#destroy
    */
    destroy: function () {

        this.raf.stop();

        this.state.destroy();
        this.sound.destroy();

        this.scale.destroy();
        this.stage.destroy();
        this.input.destroy();
        this.physics.destroy();

        this.state = null;
        this.cache = null;
        this.input = null;
        this.load = null;
        this.sound = null;
        this.stage = null;
        this.time = null;
        this.world = null;
        this.isBooted = false;

        if (this.renderType === Phaser.WEBGL)
        {
            PIXI.glContexts[this.renderer.glContextId] = null;

            this.renderer.projection = null;
            this.renderer.offset = null;

            this.renderer.shaderManager.destroy();
            this.renderer.spriteBatch.destroy();
            this.renderer.maskManager.destroy();
            this.renderer.filterManager.destroy();

            this.renderer.shaderManager = null;
            this.renderer.spriteBatch = null;
            this.renderer.maskManager = null;
            this.renderer.filterManager = null;

            this.renderer.gl = null;
            this.renderer.renderSession = null;
            Phaser.Canvas.removeFromDOM(this.canvas);
        }
        else
        {
            this.renderer.destroy(true);
        }

        Phaser.GAMES[this.id] = null;

    },

    /**
    * Called by the Stage visibility handler.
    *
    * @method Phaser.Game#gamePaused
    * @param {object} event - The DOM event that caused the game to pause, if any.
    * @protected
    */
    gamePaused: function (event) {

        //   If the game is already paused it was done via game code, so don't re-pause it
        if (!this._paused)
        {
            this._paused = true;
            this.time.gamePaused();
            this.sound.setMute();
            this.onPause.dispatch(event);
        }

    },

    /**
    * Called by the Stage visibility handler.
    *
    * @method Phaser.Game#gameResumed
    * @param {object} event - The DOM event that caused the game to pause, if any.
    * @protected
    */
    gameResumed: function (event) {

        //  Game is paused, but wasn't paused via code, so resume it
        if (this._paused && !this._codePaused)
        {
            this._paused = false;
            this.time.gameResumed();
            this.input.reset();
            this.sound.unsetMute();
            this.onResume.dispatch(event);
        }

    },

    /**
    * Called by the Stage visibility handler.
    *
    * @method Phaser.Game#focusLoss
    * @param {object} event - The DOM event that caused the game to pause, if any.
    * @protected
    */
    focusLoss: function (event) {

        this.onBlur.dispatch(event);

        if (!this.stage.disableVisibilityChange)
        {
            this.gamePaused(event);
        }

    },

    /**
    * Called by the Stage visibility handler.
    *
    * @method Phaser.Game#focusGain
    * @param {object} event - The DOM event that caused the game to pause, if any.
    * @protected
    */
    focusGain: function (event) {

        this.onFocus.dispatch(event);

        if (!this.stage.disableVisibilityChange)
        {
            this.gameResumed(event);
        }

    }

};

Phaser.Game.prototype.constructor = Phaser.Game;

/**
* The paused state of the Game. A paused game doesn't update any of its subsystems.
* When a game is paused the onPause event is dispatched. When it is resumed the onResume event is dispatched.
* @name Phaser.Game#paused
* @property {boolean} paused - Gets and sets the paused state of the Game.
*/
Object.defineProperty(Phaser.Game.prototype, \"paused\", {

    get: function () {
        return this._paused;
    },

    set: function (value) {

        if (value === true)
        {
            if (this._paused === false)
            {
                this._paused = true;
                this.sound.setMute();
                this.time.gamePaused();
                this.onPause.dispatch(this);
            }
            this._codePaused = true;
        }
        else
        {
            if (this._paused)
            {
                this._paused = false;
                this.input.reset();
                this.sound.unsetMute();
                this.time.gameResumed();
                this.onResume.dispatch(this);
            }
            this._codePaused = false;
        }

    }

});

/**
* \"Deleted code is debugged code.\" - Jeff Sickel
*/" section nil nil [154 470])
            ("Phaser API" section (:members 
              ( ("Phaser API" anchor nil nil [663 666])
                ("Namespaces<b
						class=\"caret\">" anchor nil nil [879 882])
                ("Phaser" anchor nil nil [1080 1083])
                ("PIXI" anchor nil nil [1172 1175])
                ("Classes<b
						class=\"caret\">" anchor nil nil [1278 1281])
                ("Animation" anchor nil nil [1473 1476])
                ("AnimationManager" anchor nil nil [1578 1581])
                ("AnimationParser" anchor nil nil [1697 1700])
                ("ArrayList" anchor nil nil [1814 1817])
                ("ArraySet" anchor nil nil [1919 1922])
                ("ArrayUtils" anchor nil nil [2022 2025])
                ("AudioSprite" anchor nil nil [2129 2132])
                ("BitmapData" anchor nil nil [2238 2241])
                ("BitmapText" anchor nil nil [2345 2348])
                ("Button" anchor nil nil [2452 2455])
                ("Cache" anchor nil nil [2551 2554])
                ("Camera" anchor nil nil [2648 2651])
                ("Canvas" anchor nil nil [2747 2750])
                ("Circle" anchor nil nil [2846 2849])
                ("Color" anchor nil nil [2945 2948])
                ("Device" anchor nil nil [3042 3045])
                ("DOM" anchor nil nil [3141 3144])
                ("Easing" anchor nil nil [3234 3237])
                ("Ellipse" anchor nil nil [3333 3336])
                ("Events" anchor nil nil [3434 3437])
                ("Filter" anchor nil nil [3533 3536])
                ("FlexGrid" anchor nil nil [3632 3635])
                ("FlexLayer" anchor nil nil [3735 3738])
                ("Frame" anchor nil nil [3840 3843])
                ("FrameData" anchor nil nil [3937 3940])
                ("Game" anchor nil nil [4042 4045])
                ("GameObjectCreator" anchor nil nil [4137 4140])
                ("GameObjectFactory" anchor nil nil [4258 4261])
                ("Gamepad" anchor nil nil [4379 4382])
                ("GamepadButton" anchor nil nil [4480 4483])
                ("Graphics" anchor nil nil [4593 4596])
                ("Group" anchor nil nil [4696 4699])
                ("Image" anchor nil nil [4793 4796])
                ("Input" anchor nil nil [4890 4893])
                ("InputHandler" anchor nil nil [4987 4990])
                ("Key" anchor nil nil [5098 5101])
                ("Keyboard" anchor nil nil [5191 5194])
                ("Line" anchor nil nil [5294 5297])
                ("LinkedList" anchor nil nil [5389 5392])
                ("Loader" anchor nil nil [5496 5499])
                ("LoaderParser" anchor nil nil [5595 5598])
                ("Math" anchor nil nil [5706 5709])
                ("Mouse" anchor nil nil [5801 5804])
                ("MSPointer" anchor nil nil [5898 5901])
                ("Net" anchor nil nil [6003 6006])
                ("Particle" anchor nil nil [6096 6099])
                ("Particles" anchor nil nil [6199 6202])
                ("Arcade" anchor nil nil [6304 6307])
                ("Emitter" anchor nil nil [6413 6416])
                ("Physics" anchor nil nil [6531 6534])
                ("Arcade" anchor nil nil [6632 6635])
                ("Body" anchor nil nil [6739 6742])
                ("Ninja" anchor nil nil [6849 6852])
                ("AABB" anchor nil nil [6954 6957])
                ("Body" anchor nil nil [7063 7066])
                ("Circle" anchor nil nil [7172 7175])
                ("Tile" anchor nil nil [7285 7288])
                ("P2" anchor nil nil [7394 7397])
                ("Body" anchor nil nil [7493 7496])
                ("BodyDebug" anchor nil nil [7599 7602])
                ("CollisionGroup" anchor nil nil [7715 7718])
                ("ContactMaterial" anchor nil nil [7841 7844])
                ("DistanceConstraint" anchor nil nil [7969 7972])
                ("FixtureList" anchor nil nil [8103 8106])
                ("GearConstraint" anchor nil nil [8223 8226])
                ("InversePointProxy" anchor nil nil [8349 8352])
                ("LockConstraint" anchor nil nil [8481 8484])
                ("Material" anchor nil nil [8607 8610])
                ("PointProxy" anchor nil nil [8721 8724])
                ("PrismaticConstraint" anchor nil nil [8839 8842])
                ("RevoluteConstraint" anchor nil nil [8975 8978])
                ("RotationalSpring" anchor nil nil [9109 9112])
                ("Spring" anchor nil nil [9239 9242])
                ("Plugin" anchor nil nil [9349 9352])
                ("PluginManager" anchor nil nil [9448 9451])
                ("Point" anchor nil nil [9561 9564])
                ("Pointer" anchor nil nil [9658 9661])
                ("Polygon" anchor nil nil [9759 9762])
                ("QuadTree" anchor nil nil [9860 9863])
                ("RandomDataGenerator" anchor nil nil [9963 9966])
                ("Rectangle" anchor nil nil [10088 10091])
                ("RenderTexture" anchor nil nil [10193 10196])
                ("RequestAnimationFrame" anchor nil nil [10306 10309])
                ("RetroFont" anchor nil nil [10435 10438])
                ("Rope" anchor nil nil [10540 10543])
                ("ScaleManager" anchor nil nil [10635 10638])
                ("Signal" anchor nil nil [10746 10749])
                ("SignalBinding" anchor nil nil [10845 10848])
                ("SinglePad" anchor nil nil [10958 10961])
                ("Sound" anchor nil nil [11063 11066])
                ("SoundManager" anchor nil nil [11160 11163])
                ("Sprite" anchor nil nil [11271 11274])
                ("SpriteBatch" anchor nil nil [11370 11373])
                ("Stage" anchor nil nil [11479 11482])
                ("State" anchor nil nil [11576 11579])
                ("StateManager" anchor nil nil [11673 11676])
                ("Text" anchor nil nil [11784 11787])
                ("Tile" anchor nil nil [11879 11882])
                ("Tilemap" anchor nil nil [11974 11977])
                ("TilemapLayer" anchor nil nil [12075 12078])
                ("TilemapParser" anchor nil nil [12186 12189])
                ("Tileset" anchor nil nil [12299 12302])
                ("TileSprite" anchor nil nil [12400 12403])
                ("Time" anchor nil nil [12507 12510])
                ("Timer" anchor nil nil [12602 12605])
                ("TimerEvent" anchor nil nil [12699 12702])
                ("Touch" anchor nil nil [12806 12809])
                ("Tween" anchor nil nil [12903 12906])
                ("TweenData" anchor nil nil [13000 13003])
                ("TweenManager" anchor nil nil [13105 13108])
                ("Utils" anchor nil nil [13216 13219])
                ("Debug" anchor nil nil [13313 13316])
                ("World" anchor nil nil [13416 13419])
                ("AbstractFilter" anchor nil nil [13513 13516])
                ("AjaxRequest" anchor nil nil [13626 13629])
                ("AlphaMaskFilter" anchor nil nil [13733 13736])
                ("AsciiFilter" anchor nil nil [13848 13851])
                ("AssetLoader" anchor nil nil [13955 13958])
                ("AtlasLoader" anchor nil nil [14062 14065])
                ("BaseTexture" anchor nil nil [14169 14172])
                ("BitmapFontLoader" anchor nil nil [14276 14279])
                ("BitmapText" anchor nil nil [14393 14396])
                ("BlurFilter" anchor nil nil [14498 14501])
                ("BlurXFilter" anchor nil nil [14603 14606])
                ("BlurYFilter" anchor nil nil [14710 14713])
                ("CanvasBuffer" anchor nil nil [14817 14820])
                ("CanvasGraphics" anchor nil nil [14926 14929])
                ("CanvasMaskManager" anchor nil nil [15039 15042])
                ("CanvasRenderer" anchor nil nil [15158 15161])
                ("CanvasTinter" anchor nil nil [15271 15274])
                ("Circle" anchor nil nil [15380 15383])
                ("ColorMatrixFilter" anchor nil nil [15477 15480])
                ("ColorStepFilter" anchor nil nil [15596 15599])
                ("ComplexPrimitiveShader" anchor nil nil [15711 15714])
                ("ConvolutionFilter" anchor nil nil [15840 15843])
                ("CrossHatchFilter" anchor nil nil [15959 15962])
                ("DisplacementFilter" anchor nil nil [16076 16079])
                ("DisplayObject" anchor nil nil [16197 16200])
                ("DisplayObjectContainer" anchor nil nil [16308 16311])
                ("DotScreenFilter" anchor nil nil [16437 16440])
                ("Ellipse" anchor nil nil [16552 16555])
                ("Event" anchor nil nil [16651 16654])
                ("EventTarget" anchor nil nil [16746 16749])
                ("FilterBlock" anchor nil nil [16853 16856])
                ("FilterTexture" anchor nil nil [16960 16963])
                ("Graphics" anchor nil nil [17071 17074])
                ("GraphicsData" anchor nil nil [17172 17175])
                ("GrayFilter" anchor nil nil [17281 17284])
                ("ImageLoader" anchor nil nil [17386 17389])
                ("InteractionData" anchor nil nil [17493 17496])
                ("InteractionManager" anchor nil nil [17608 17611])
                ("InvertFilter" anchor nil nil [17729 17732])
                ("JsonLoader" anchor nil nil [17838 17841])
                ("Matrix" anchor nil nil [17943 17946])
                ("MovieClip" anchor nil nil [18040 18043])
                ("NoiseFilter" anchor nil nil [18143 18146])
                ("NormalMapFilter" anchor nil nil [18250 18253])
                ("PixelateFilter" anchor nil nil [18365 18368])
                ("PIXI" anchor nil nil [18478 18481])
                ("PixiFastShader" anchor nil nil [18571 18574])
                ("PixiShader" anchor nil nil [18684 18687])
                ("Point" anchor nil nil [18789 18792])
                ("Polygon" anchor nil nil [18884 18887])
                ("PolyK" anchor nil nil [18983 18986])
                ("PrimitiveShader" anchor nil nil [19078 19081])
                ("Rectangle" anchor nil nil [19193 19196])
                ("RenderTexture" anchor nil nil [19296 19299])
                ("RGBSplitFilter" anchor nil nil [19407 19410])
                ("Rope" anchor nil nil [19520 19523])
                ("RoundedRectangle" anchor nil nil [19613 19616])
                ("SepiaFilter" anchor nil nil [19730 19733])
                ("SmartBlurFilter" anchor nil nil [19837 19840])
                ("Spine" anchor nil nil [19952 19955])
                ("SpineLoader" anchor nil nil [20047 20050])
                ("SpineTextureLoader" anchor nil nil [20154 20157])
                ("Sprite" anchor nil nil [20275 20278])
                ("SpriteBatch" anchor nil nil [20372 20375])
                ("SpriteSheetLoader" anchor nil nil [20479 20482])
                ("Stage" anchor nil nil [20598 20601])
                ("Strip" anchor nil nil [20693 20696])
                ("StripShader" anchor nil nil [20788 20791])
                ("Text" anchor nil nil [20895 20898])
                ("Texture" anchor nil nil [20988 20991])
                ("TilingSprite" anchor nil nil [21087 21090])
                ("TiltShiftFilter" anchor nil nil [21196 21199])
                ("TiltShiftXFilter" anchor nil nil [21311 21314])
                ("TiltShiftYFilter" anchor nil nil [21428 21431])
                ("TwistFilter" anchor nil nil [21545 21548])
                ("VideoTexture" anchor nil nil [21652 21655])
                ("WebGLBlendModeManager" anchor nil nil [21761 21764])
                ("WebGLFastSpriteBatch" anchor nil nil [21888 21891])
                ("WebGLFilterManager" anchor nil nil [22013 22016])
                ("WebGLRenderer" anchor nil nil [22134 22137])
                ("Core<b class=\"caret\">" anchor nil nil [22264 22267])
                ("Game" anchor nil nil [22418 22421])
                ("Group" anchor nil nil [22491 22494])
                ("World" anchor nil nil [22566 22569])
                ("Loader" anchor nil nil [22641 22644])
                ("Time" anchor nil nil [22718 22721])
                ("Camera" anchor nil nil [22791 22794])
                ("State Manager" anchor nil nil [22868 22871])
                ("Tween Manager" anchor nil nil [22958 22961])
                ("Sound Manager" anchor nil nil [23048 23051])
                ("Input Manager" anchor nil nil [23138 23141])
                ("Scale Manager" anchor nil nil [23221 23224])
                ("Game Objects<b class=\"caret\">" anchor nil nil [23332 23335])
                ("Factory (game.add)" anchor nil nil [23494 23497])
                ("Creator (game.make)" anchor nil nil [23594 23597])
                ("Sprite" anchor nil nil [23695 23698])
                ("Image" anchor nil nil [23772 23775])
                ("Sound" anchor nil nil [23847 23850])
                ("Particle Emitter" anchor nil nil [23922 23925])
                ("Particle" anchor nil nil [24027 24030])
                ("Text" anchor nil nil [24108 24111])
                ("Tween" anchor nil nil [24181 24184])
                ("BitmapText" anchor nil nil [24256 24259])
                ("Tilemap" anchor nil nil [24341 24344])
                ("BitmapData" anchor nil nil [24420 24423])
                ("RetroFont" anchor nil nil [24505 24508])
                ("Button" anchor nil nil [24588 24591])
                ("Animation" anchor nil nil [24665 24668])
                ("Graphics" anchor nil nil [24748 24751])
                ("RenderTexture" anchor nil nil [24829 24832])
                ("TileSprite" anchor nil nil [24920 24923])
                ("Geometry<b class=\"caret\">" anchor nil nil [25026 25029])
                ("Circle" anchor nil nil [25184 25187])
                ("Rectangle" anchor nil nil [25261 25264])
                ("Point" anchor nil nil [25344 25347])
                ("Line" anchor nil nil [25419 25422])
                ("Ellipse" anchor nil nil [25492 25495])
                ("Polygon" anchor nil nil [25571 25574])
                ("Physics<b class=\"caret\">" anchor nil nil [25671 25674])
                ("Arcade Physics" anchor nil nil [25828 25831])
                ("Body" anchor nil nil [25921 25924])
                ("P2 Physics" anchor nil nil [26009 26012])
                ("Body" anchor nil nil [26094 26097])
                ("Spring" anchor nil nil [26178 26181])
                ("CollisionGroup" anchor nil nil [26266 26269])
                ("ContactMaterial" anchor nil nil [26370 26373])
                ("Ninja Physics" anchor nil nil [26476 26479])
                ("Body" anchor nil nil [26567 26570])
                ("Input<b class=\"caret\">" anchor nil nil [26669 26672])
                ("Input Handler" anchor nil nil [26824 26827])
                ("Pointer" anchor nil nil [26914 26917])
                ("Mouse" anchor nil nil [26993 26996])
                ("Keyboard" anchor nil nil [27068 27071])
                ("Key" anchor nil nil [27149 27152])
                ("Gamepad" anchor nil nil [27220 27223])
                ("Community<b class=\"caret\">" anchor nil nil [27320 27323])
                ("Phaser Books" anchor nil nil [27479 27482])
                ("Phaser Github" anchor nil nil [27577 27580])
                ("Phaser Examples" anchor nil nil [27680 27683])
                ("Phaser Plugins" anchor nil nil [27773 27776])
                ("Forum" anchor nil nil [27885 27888])
                ("Stack Overflow" anchor nil nil [27988 27991])
                ("Newsletter" anchor nil nil [28113 28116])
                ("Twitter" anchor nil nil [28228 28231])
                ("IRC" anchor nil nil [28319 28322])
                ("GitTip" anchor nil nil [28466 28469])
                ("Source: D:/wamp/www/phaser/src/core/Game.js" section (:members 
                  ( ("JSDoc 3.3.0-dev" anchor nil nil [60688 60691])
                    ("DocStrap template" anchor nil nil [60805 60808]))                  ) nil [28665 60956]))              ) nil [470 60956])
            ("Sunlight.highlightAll({lineNumbers:true,  showMenu: true, enableDoclinks :true});" section nil nil [60956 61001])
            ("Sunlight.highlightAll({lineNumbers:true,  showMenu: true, enableDoclinks :true});" section nil nil [61001 61057])
            ("Sunlight.highlightAll({lineNumbers:true,  showMenu: true, enableDoclinks :true});" section nil nil [61057 61118])
            ("Sunlight.highlightAll({lineNumbers:true,  showMenu: true, enableDoclinks :true});" section nil nil [61118 61182])
            ("Sunlight.highlightAll({lineNumbers:true,  showMenu: true, enableDoclinks :true});" section nil nil [61182 61239])
            ("Sunlight.highlightAll({lineNumbers:true,  showMenu: true, enableDoclinks :true});" section nil nil [61239 61286])
            ("Sunlight.highlightAll({lineNumbers:true,  showMenu: true, enableDoclinks :true});" section nil nil [61286 61338])
            ("Sunlight.highlightAll({lineNumbers:true,  showMenu: true, enableDoclinks :true});" section nil nil [61338 61393])
            ("Sunlight.highlightAll({lineNumbers:true,  showMenu: true, enableDoclinks :true});" section nil nil [61393 61448])
            ("Sunlight.highlightAll({lineNumbers:true,  showMenu: true, enableDoclinks :true});" section nil nil [61448 61489])
            ("Sunlight.highlightAll({lineNumbers:true,  showMenu: true, enableDoclinks :true});" section nil nil [61489 61593])
            ("$( function () {
			$( \"#toc\" ).toc( {
				anchorName  : function(i, heading, prefix) {
					return $(heading).attr(\"id\") || ( prefix + i );
				},
				selectors   : \"h1,h2,h3,h4\",
				showAndHide : false,
				scrollTo    : 60
			} );
			$( \"#toc>ul\" ).addClass( \"nav nav-pills nav-stacked\" );
			$( \"#main span[id^='toc']\" ).addClass( \"toc-shim\" );

		} );" section nil nil [61593 61993]))          
    :file "Game.js.html"
    :pointmax 61993
    :fsize 61993
    :lastmodtime '(21760 22710 557346 674000)
    :unmatched-syntax 'nil
    )
   )
  :file "!home!vince!Code!js!game!animations!phaser!docs!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2"
  )
