maximum' :: (Ord x) => [x] -> x
maximum' [] = error "maximum of empty list"
maximum' [x] = x
maximum' (x:xs)
  | x > maxTail = x 
  | otherwise = maxTail
  where maxTail = maximum' xs

maximum'' :: (Ord x) => [x] -> x
maximum'' [] = error "maximum of empty list"
maximum'' [x] = x
maximum'' (x:xs) = max x (maximum'' xs)
  
replicate' :: (Num i, Ord i) => i -> x -> [x]
replicate' i x
  | i  <= 0 = []
  | otherwise = x:replicate' (i-1) x

take' :: Int -> [a] -> [a]
take' i [] = []
take' i (x:xs)
  | i <= 0 = []
  | otherwise = x:take' (i-1) xs

reverse' :: [a] -> [a]
reverse' [] = []
reverse' (x:xs) = reverse' xs ++ [x]

repeat' :: a -> [a]
repeat' x = x:repeat' x

zip' :: [a] -> [b] -> [(a, b)]
zip' _ [] = []
zip' [] _ = []
zip' (x:xs) (y:ys) = (x, y) : zip' xs ys

elem' :: (Ord x) => x -> [x] -> Bool
elem' x [] = False
elem' x (y:ys)
  | x == y = True
  | otherwise = x `elem'` ys
